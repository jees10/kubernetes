solo master y workes

1 yum -y install net-tools
2 sudo yum -y install mod_ssl openssl
3 openssl genrsa -out ca.key 2048
4 openssl req -new -key ca.key -out ca.csr
5 openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt
6 cp ca.crt /etc/pki/tls/certs
7 cp ca.key /etc/pki/tls/private/ca.key
8 cp ca.csr /etc/pki/tls/private/ca.csr
9 vi /etc/httpd/conf.d/ssl.conf
10 cambiar SSLCertificateFile /etc/pki/tls/certs/localhost.crt a SSLCertificateFile /etc/pki/tls/certs/ca.crt
11 cambiar SSLCertificateKeyFile /etc/pki/tls/private/localhost.key a SSLCertificateKeyFile /etc/pki/tls/private/ca.key
12 sudo systemctl restart httpd
13 yum install ca-certificates
14 update-ca-trust force-enable
15 vi /etc/pki/ca-trust/source/anchors/foo.ctr
16 update-ca-trust extract

instalacion de docker
------------------------------------------------------------------------------------------------------------------------------------
1 yum install -y yum-utils device-mapper-persistent-data lvm2

2 yum-config-manager --add-repo \
  https://download.docker.com/linux/centos/docker-ce.repo
  
3  yum update -y && yum install -y \
  containerd.io-1.2.13 \
  docker-ce-19.03.11 \
  docker-ce-cli-19.03.11
  
4  mkdir /etc/docker

5 cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

6 mkdir -p /etc/systemd/system/docker.service.d

7 systemctl daemon-reload
systemctl restart docker
----------------------------------------------------------------------------------------------------------------------------------------


instalacion de kubeadm
----------------------------------------------------------------------------------------------------------------------------------------
1 cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system


2 cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF


3 setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

4 yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

5 systemctl enable --now kubelet
---------------------------------------------------------------------------------------------------------------------------------------


crear cluster con HA
---------------------------------------------------------------------------------------------------------------------------------------
1 kubeadm init --control-plane-endpoint "192.168.1.47:6443" --upload-certs

2 mkdir -p $HOME/.kube

3 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

4 sudo chown $(id -u):$(id -g) $HOME/.kube/config

5 kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
----------------------------------------------------------------------------------------------------------------------------------------


unir segundo master
----------------------------------------------------------------------------------------------------------------------------------------
1 kubeadm join 192.168.1.47:6443 --token genz65.mip2ygod415ybdp8 \
    --discovery-token-ca-cert-hash sha256:42b2610c934e7ab7fbf0afc13b2bc8330cdd95ded8ab0acfb612b1eb2d7622b4 \
    --control-plane --certificate-key 714751661a81a7de404337f7dee2f034e7a802e1adcf5938e46440d78762ac2b

2 mkdir -p $HOME/.kube

3 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

4 sudo chown $(id -u):$(id -g) $HOME/.kube/config
----------------------------------------------------------------------------------------------------------------------------------------


unir workers
----------------------------------------------------------------------------------------------------------------------------------------
1 kubeadm join 192.168.1.47:6443 --token genz65.mip2ygod415ybdp8 \
    --discovery-token-ca-cert-hash sha256:42b2610c934e7ab7fbf0afc13b2bc8330cdd95ded8ab0acfb612b1eb2d7622b4
---------------------------------------------------------------------------------------------------------------------------------------

instalar Kubernetes Dashboard
---------------------------------------------------------------------------------------------------------------------------------------
 1 kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
 2 crear archivo de configuracion con el nombre de dashboard-admin.yml
 
 contenido del archivo
 --------------------------------------------------------------------------------------------------------------------------------------
 apiVersion: v1
 kind: ServiceAccount
  metadata:
  name: admin-user
  namespace: kube-system
  ------------------------------------------------------------------------------------------------------------------------------------
  3 crear archivo admin-role-binding.yml
  
  contenido del archivo
  ------------------------------------------------------------------------------------------------------------------------------------
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
   name: admin-user
  roleRef:
   apiGroup: rbac.authorization.k8s.io
   kind: ClusterRole
   name: cluster-admin
  subjects:
  - kind: ServiceAccount
   name: admin-user
   namespace: kube-system
   ------------------------------------------------------------------------------------------------------------------------------------
4 kubectl apply -f admin-role-binding.yml
   
5 kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep
  admin-user | awk '{print $1}')
  
6 copiamos el token que nos da el comando anterior para acceder al dashboard de kubernetes

7 kubectl proxy

8 no dirijimos a localhost:8001 donde se esta nuestro dasboard

9 nos dirijimos a http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ para poder ver nuestro dasboard luego nos pedira el tocken del paso 6 lo pegamos e ingresamos y listo ya tendriamos nuestro dashboard levantado para ver los detalles de nuestro cluster en kubernetes
  

HA-BALANCER
1 sudo yum install epel-release
2 sudo yum install nginx
3 yum install policycoreutils-python
4 semanage port -a -t http_port_t  -p tcp 6443
5 configurar archivo de iniciacion de daemon con los puertos de sus maestros


link de video
https://youtu.be/DpJSZTBSWts
